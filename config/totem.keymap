//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Layer names

#define LR_BSE 0
#define LR_NUM 1
#define LR_SYM 2
#define LR_NAV 3
#define LR_CFG 4

// Key positions for `hold-trigger-tap-positions`

#define LEFT_TOP_KEYS 0 1 2 3 4
#define LEFT_MID_KEYS 10 11 12 13 14
#define LEFT_BOT_KEYS 20 21 22 23 24 25
#define LEFT_TMB_KEYS 32 33 34
#define LEFT_KEYS LEFT_TOP_KEYS LEFT_MID_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS
#define RGHT_TOP_KEYS 5 6 7 8 9
#define RGHT_MID_KEYS 15 16 17 18 19
#define RGHT_BOT_KEYS 26 27 28 29 30 31
#define RGHT_TMB_KEYS 35 36 37
#define RGHT_KEYS RGHT_TOP_KEYS RGHT_MID_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS

&lt {
    flavor = "hold-preferred";
};

/ {
    behaviors {
        hrm_l: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <RGHT_KEYS LEFT_TOP_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
        hrm_r: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <LEFT_KEYS RGHT_TOP_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
        period_colon_morph: period_colon_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON_MORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_semi_morph: comma_semi_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ht_kp_cw: ht_kp_cw {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_kp_cw";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        tdrp: tap_dance_right_pinky {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_right_pinky";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&sk LSHFT>, <&kp RALT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        config_layer_combo {
            bindings = <&sl LR_CFG>;
            key-positions = <20 31>;
            timeout-ms = <3000>;
        };

        // Vertical combos rhs
        at_combo {
            bindings = <&kp AT>;
            key-positions = <5 15>;
            layers = <LR_BSE>;
        };
        under_combo {
            bindings = <&kp UNDER>;
            key-positions = <6 16>;
            layers = <LR_BSE>;
        };
        semi_combo {
            bindings = <&kp SEMI>;
            key-positions = <7 17>;
            layers = <LR_BSE>;
        };
        colon_combo {
            bindings = <&kp COLON>;
            key-positions = <8 18>;
            layers = <LR_BSE>;
        };
        dquote_combo {
            bindings = <&kp DQT>;
            key-positions = <8 9>;
            layers = <LR_BSE>;
        };

        equal_combo {
            bindings = <&hrm_r RS(RCTRL) EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <30>;
            layers = <LR_BSE>;
        };
        plus_combo {
            bindings = <&hrm_r RS(LALT) PLUS>;
            key-positions = <16 18>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        star_combo {
            bindings = <&hrm_r RC(LALT) STAR>;
            key-positions = <17 18>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        bang_combo {
            bindings = <&kp EXCL>;
            key-positions = <15 16>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        dash_combo {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };

        amps_combo {
            bindings = <&kp AMPS>;
            key-positions = <27 28>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        pipe_combo {
            bindings = <&kp PIPE>;
            key-positions = <28 29>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        hash_combo {
            bindings = <&kp HASH>;
            key-positions = <27 29>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        prcnt_combo {
            bindings = <&kp PRCNT>;
            key-positions = <27 28 29>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        bslh_combo {
            bindings = <&kp BSLH>;
            key-positions = <29 30>;
            layers = <LR_BSE>;
        };
        qmark_combo {
            bindings = <&kp QMARK>;
            key-positions = <28 30>;
            layers = <LR_BSE>;
        };

        caret_combo {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        dllr_combo {
            bindings = <&kp DLLR>;
            key-positions = <7 8>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };
        grave_combo {
            bindings = <&kp GRAVE>;
            key-positions = <6 8>;
            layers = <LR_BSE>;
        };

        dash_combo_lhs {
            bindings = <&kp MINUS>;
            key-positions = <3 13>;
            layers = <LR_BSE>;
            timeout-ms = <30>;
        };

        ctrl_pgup_combo {
            bindings = <&kp LC(PG_UP)>;
            key-positions = <16 17>;
            timeout-ms = <30>;
            layers = <LR_NAV>;
        };
        ctrl_pgdown_combo {
            bindings = <&kp LC(PG_DN)>;
            key-positions = <17 18>;
            timeout-ms = <30>;
            layers = <LR_NAV>;
        };

        right_arrow_combo {
            bindings = <&right_arrow>;
            key-positions = <7 9 8>;
            timeout-ms = <30>;
            layers = <LR_BSE>;
        };

        ctrl_k_combo {
            bindings = <&kp LC(K)>;
            key-positions = <10 11 12>;
        };
    };

    macros {
        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "RIGHT_ARROW";
        };
        my_double_colon: my_double_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "MY_DOUBLE_COLON";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                  &kp Q  &kp W          &kp F           &kp P             &kp B             &kp J           &kp L             &kp U              &kp Y                &kp SINGLE_QUOTE
                  &kp A  &hrm_l LALT R  &hrm_l LCTRL S  &hrm_l LSHFT T    &kp G             &kp M           &hrm_r RSHFT N    &hrm_r RCTRL E     &hrm_r LALT I        &kp O
&ht_kp_cw LWIN 0  &kp Z  &kp X          &kp C           &kp D             &kp V             &kp K           &kp H             &comma_semi_morph  &period_colon_morph  &kp FSLH          &tdrp
                                        &kp DEL         &lt LR_SYM SPACE  &lt LR_NAV TAB    &lt LR_NAV ESC  &lt LR_NUM ENTER  &kp BSPC
            >;
        };

        number_layer {
            bindings = <
        &trans  &kp N7          &kp N8           &kp N9            &trans      &trans  &kp F7           &kp F8           &kp F9          &kp F12
        &kp N0  &hrm_l LALT N1  &hrm_l LCTRL N2  &hrm_l LSHIFT N3  &kp DOT     &trans  &hrm_r RSHFT F1  &hrm_r RCTRL F2  &hrm_r RALT F3  &kp F10
&trans  &trans  &kp N4          &kp N5           &kp N6            &trans      &trans  &kp F4           &kp F5           &kp F6          &kp F11  &molock
                                &kp N0           &trans            &trans      &trans  &trans           &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans     &trans     &kp LPAR  &kp RPAR  &trans
        &trans  &trans  &trans  &trans  &trans    &trans     &kp LBKT   &kp LBRC  &kp RBRC  &kp RBKT
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &kp LT    &kp GT    &kp BSLH  &molock
                        &trans  &trans  &trans    &kp SPACE  &kp ENTER  &trans
            >;

            label = "SYM";
        };

        nav_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
        &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp B     &kp LBRC   &kp RBRC   &kp W      &molock
                        &trans  &trans  &trans    &trans  &trans    &trans
            >;

            label = "NAV";
        };

        config_layer {
            bindings = <
        &trans  &bt BT_CLR    &trans        &out OUT_TOG  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans    &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans    &trans  &trans  &trans
            >;

            label = "CONFIG";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
