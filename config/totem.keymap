//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer names
#define LR_BASE 0
#define LR_NUM  1
#define LR_SYM  2
#define LR_NAV  3
#define LR_CFG  4

// Key positions for `hold-trigger-tap-positions`
#define LEFT_TOP_KEYS 0 1 2 3 4
#define LEFT_MID_KEYS 10 11 12 13 14
#define LEFT_BOT_KEYS 20 21 22 23 24 25
#define LEFT_TMB_KEYS 32 33 34
#define LEFT_KEYS LEFT_TOP_KEYS LEFT_MID_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS
#define RGHT_TOP_KEYS 5 6 7 8 9
#define RGHT_MID_KEYS 15 16 17 18 19
#define RGHT_BOT_KEYS 26 27 28 29 30 31
#define RGHT_TMB_KEYS 35 36 37
#define RGHT_KEYS RGHT_TOP_KEYS RGHT_MID_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    retro-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
    retro-tap;
};

/ {
    behaviors {
        hrm_l: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <RGHT_KEYS LEFT_TOP_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS>;
            hold-trigger-on-release;
            retro-tap;
            bindings = <&kp>, <&kp>;
        };
        hrm_r: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <LEFT_KEYS RGHT_TOP_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS>;
            hold-trigger-on-release;
            retro-tap;
            bindings = <&kp>, <&kp>;
        };
        period_colon_morph: period_colon_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON_MORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_semi_morph: comma_semi_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        config_layer_combo {
            bindings = <&sl LR_CFG>;
            key-positions = <20 31>;
            timeout-ms = <3000>;
        };

        escape_combo {
            bindings = <&kp ESC>;
            key-positions = <28 29>;
            timeout-ms = <30>;
        };

        under_combo {
            bindings = <&kp UNDER>;
            key-positions = <23 22>;
            timeout-ms = <30>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
          &kp Q  &kp W          &kp F           &kp P             &kp B             &kp J           &kp L             &kp U              &kp Y                &kp SINGLE_QUOTE
          &kp A  &hrm_l LALT R  &hrm_l LCTRL S  &hrm_l LSHFT T    &kp G             &kp M           &hrm_r RSHFT N    &hrm_r RCTRL E     &hrm_r LALT I        &kp O
&kp LWIN  &kp Z  &kp X          &kp C           &kp D             &kp V             &kp K           &kp H             &comma_semi_morph  &period_colon_morph  &kp FSLH          &kp RALT
                                &kp DEL         &lt LR_SYM ENTER  &lt LR_NAV TAB    &lt LR_NAV ESC  &lt LR_NUM SPACE  &kp BSPC
            >;
        };

        number_layer {
            bindings = <
        &kp MINUS  &kp N7          &kp N8           &kp N9            &kp PLUS     &trans  &kp F7           &kp F8           &kp F9          &kp F12
        &kp N0     &hrm_l LALT N4  &hrm_l LCTRL N5  &hrm_l LSHIFT N6  &kp EQUAL    &trans  &hrm_r RSHFT F4  &hrm_r RCTRL F5  &hrm_r RALT F6  &kp F11
&trans  &kp FSLH   &kp N1          &kp N2           &kp N3            &kp ASTRK    &trans  &kp F1           &kp F2           &kp F3          &kp F10  &trans
                                   &trans           &trans            &kp UNDER    &trans  &trans           &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            bindings = <
        &trans  &trans      &trans           &trans             &trans    &kp PRCNT  &kp LPAR   &kp RPAR  &kp LT     &kp GT
        &trans  &kp K_MUTE  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &trans    &kp STAR   &kp LBRC   &kp RBRC  &kp LBKT   &kp RBKT
&trans  &trans  &trans      &trans           &trans             &trans    &kp HASH   &kp CARET  &kp DLLR  &kp GRAVE  &kp AT    &trans
                            &trans           &trans             &trans    &kp AMPS   &kp PIPE   &trans
            >;

            label = "SYM";
        };

        nav_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp PG_UP  &kp PG_DN  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans     &trans     &trans     &trans
                        &trans  &trans  &trans    &trans  &trans    &trans
            >;

            label = "NAV";
        };

        config_layer {
            bindings = <
        &trans  &bt BT_CLR    &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans    &trans  &trans  &trans
            >;

            label = "CONFIG";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav_layer_combo {
            if-layers = <LR_NUM LR_SYM>;
            then-layer = <LR_NAV>;
        };
    };
};
