//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "./nodefree.keymap"

// Layer names

#define LR_BSE 0
#define LR_NUM 1
#define LR_SYM 2
#define LR_NAV 3
#define LR_CFG 4

#define TYPING_LAYERS LR_BSE LR_SYM LR_NUM

// Key positions for `hold-trigger-tap-positions`

#define LEFT_TOP_KEYS LT0 LT1 LT2 LT3 LT4
#define LEFT_MID_KEYS LM0 LM1 LM2 LM3 LM4
#define LEFT_BOT_KEYS LB0 LB1 LB2 LB3 LB4 LB5
#define LEFT_TMB_KEYS LH0 LH1 LH2
#define LEFT_KEYS LEFT_TOP_KEYS LEFT_MID_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS

#define RGHT_TOP_KEYS RT0 RT1 RT2 RT3 RT4
#define RGHT_MID_KEYS RM0 RM1 RM2 RM3 RM4
#define RGHT_BOT_KEYS RB0 RB1 RB2 RB3 RB4 RB5
#define RGHT_TMB_KEYS RH0 RH1 RH2
#define RGHT_KEYS RGHT_TOP_KEYS RGHT_MID_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS

#define HOME_ROW_COMBO_TIMEOUT 30
#define VERT_COMBO_TIMEOUT 50
#define HRZN_COMBO_TIMEOUT 40

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TIMEOUT) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    require-prior-idle-ms = <80>; \
  }

&lt {
    flavor = "hold-preferred";
};

/ {
    behaviors {
        hrm_l: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <RGHT_KEYS LEFT_TOP_KEYS LEFT_BOT_KEYS LEFT_TMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
        hrm_r: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <LEFT_KEYS RGHT_TOP_KEYS RGHT_BOT_KEYS RGHT_TMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
        period_colon_morph: period_colon_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON_MORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_semi_morph: comma_semi_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ht_kp_cw: ht_kp_cw {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_kp_cw";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        tdrp: tap_dance_right_pinky {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_right_pinky";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&sk LSHFT>, <&kp RALT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        config_layer_combo {
            bindings = <&sl LR_CFG>;
            key-positions = <20 31>;
            timeout-ms = <1000>;
        };

        // Vertical (RHS)
        COMBO(at, &kp AT, RT0 RM0, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(qmark, &kp QMARK, RB0 RM0, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(under, &kp UNDER, RT1 RM1, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(semi, &kp SEMI, RT2 RM2, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(colon, &kp COLON, RT3 RM3, TYPING_LAYERS, VERT_COMBO_TIMEOUT);

        // Vertical (LHS)
        COMBO(lbrc_vert, &kp LBRC, LT3 LM3, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(rbrc_vert, &kp RBRC, LT2 LM2, TYPING_LAYERS, VERT_COMBO_TIMEOUT);
        COMBO(dash_lhs, &kp MINUS, LT1 LM1, TYPING_LAYERS, VERT_COMBO_TIMEOUT);

        // Middle row
        COMBO(equal, &hrm_r RS(RCTRL) EQUAL, RM1 RM2, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(plus, &hrm_r RS(LALT) PLUS, RM1 RM3, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(star, &hrm_r RC(LALT) STAR, RM2 RM3, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(bang, &kp EXCL, RM0 RM1, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(dash, &kp MINUS, RM3 RM4, LR_BSE, HOME_ROW_COMBO_TIMEOUT);

        COMBO(lparen, &hrm_l LC(LALT) LPAR, LM3 LM2, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(rparen, &hrm_l LS(LCTRL) RPAR, LM2 LM1, LR_BSE, HOME_ROW_COMBO_TIMEOUT);
        COMBO(qmark_lhs, &hrm_l LS(LCTRL) QMARK, LM3 LM1, LR_BSE, HOME_ROW_COMBO_TIMEOUT);

        COMBO(amps, &kp AMPS, RB1 RB2, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(pipe, &kp PIPE, RB2 RB3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(hash, &kp HASH, RB1 RB3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(prcnt, &kp PRCNT, RB1 RB2 RB3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(bslh, &kp BSLH, RB3 RB4, LR_BSE, HRZN_COMBO_TIMEOUT);

        COMBO(lt, &kp LT, LB3 LB2, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(gt, &kp GT, LB2 LB1, LR_BSE, HRZN_COMBO_TIMEOUT);

        // Top row
        COMBO(caret, &kp CARET, RT1 RT2, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(dllr, &kp DLLR, RT2 RT3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(grave, &kp GRAVE, RT1 RT3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(dquote, &kp DQT, RT3 RT4, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(right_arrow, &right_arrow, RT2 RT3 RT4, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(my_double_colon, &my_double_colon, RT1 RT2 RT3, LR_BSE, HRZN_COMBO_TIMEOUT);

        COMBO(ctrl_k, &kp LC(K), LT4 LT3, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(lbkt, &kp LBKT, LT3 LT2, LR_BSE, HRZN_COMBO_TIMEOUT);
        COMBO(rbkt, &kp RBKT, LT2 LT1, LR_BSE, HRZN_COMBO_TIMEOUT);

        COMBO(ctrl_pgup, &kp LC(PG_UP), RM1 RM2, LR_NAV, HRZN_COMBO_TIMEOUT);
        COMBO(ctrl_pgdown, &kp LC(PG_DN), RM2 RM3, LR_NAV, HRZN_COMBO_TIMEOUT);
    };

    macros {
        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "RIGHT_ARROW";
        };
        my_double_colon: my_double_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "MY_DOUBLE_COLON";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                  &kp Q  &kp W          &kp F           &kp P             &kp B             &kp J           &kp L             &kp U              &kp Y                &kp SINGLE_QUOTE
                  &kp A  &hrm_l LALT R  &hrm_l LCTRL S  &hrm_l LSHFT T    &kp G             &kp M           &hrm_r RSHFT N    &hrm_r RCTRL E     &hrm_r LALT I        &kp O
&ht_kp_cw LWIN 0  &kp Z  &kp X          &kp C           &kp D             &kp V             &kp K           &kp H             &comma_semi_morph  &period_colon_morph  &kp FSLH          &tdrp
                                        &kp DEL         &lt LR_SYM SPACE  &lt LR_NAV TAB    &lt LR_NAV ESC  &lt LR_NUM ENTER  &kp BSPC
            >;
        };

        number_layer {
            bindings = <
        &trans  &kp N7          &kp N8           &kp N9            &trans      &trans  &kp F7           &kp F8           &kp F9          &kp F12
        &kp N0  &hrm_l LALT N1  &hrm_l LCTRL N2  &hrm_l LSHIFT N3  &kp DOT     &trans  &hrm_r RSHFT F1  &hrm_r RCTRL F2  &hrm_r RALT F3  &kp F10
&trans  &trans  &kp N4          &kp N5           &kp N6            &trans      &trans  &kp F4           &kp F5           &kp F6          &kp F11  &molock
                                &kp N0           &trans            &trans      &trans  &trans           &trans
            >;
        };

        symbol_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans     &trans     &kp LPAR  &kp RPAR  &trans
        &trans  &trans  &trans  &trans  &trans    &trans     &kp LBKT   &kp LBRC  &kp RBRC  &kp RBKT
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &kp LT    &kp GT    &kp BSLH  &molock
                        &trans  &trans  &trans    &kp SPACE  &kp ENTER  &trans
            >;
        };

        nav_layer {
            bindings = <
        &trans  &trans       &trans       &trans     &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
        &trans  &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
&trans  &trans  &trans       &trans       &trans     &trans    &trans  &kp B     &kp LBRC   &kp RBRC   &kp W      &molock
                             &trans       &trans     &trans    &trans  &trans    &trans
            >;
        };

        config_layer {
            bindings = <
        &trans  &bt BT_CLR    &trans        &out OUT_TOG  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans    &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
